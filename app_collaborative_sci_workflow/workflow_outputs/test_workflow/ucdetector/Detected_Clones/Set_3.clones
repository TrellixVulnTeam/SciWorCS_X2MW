$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678382
src/main/org/ucdetector/util/JavaElementUtil.java 82 91
rc/main/org/ucdetector/search/SearchManager.jav 664 696
----------------------------------------
  public static IPackageFragmentRoot getPackageFragmentRootFor(IJavaElement javaElement) {
    IJavaElement parent = javaElement.getParent();
    while (true) {
      // System.out.println("parent =\t" + dumpJavaElement(parent));
      if (parent == null || parent instanceof IPackageFragmentRoot) {
        return (IPackageFragmentRoot) parent;
      }
      parent = parent.getParent();
    }
  }

----------------------------------------
    private boolean ignoreMatch(SearchMatch match) {
      IJavaElement matchJavaElement = defaultIgnoreMatch(match);
      if (matchJavaElement == null) {
        return true;
      }
      // Ignore import, because it maybe an unnecessary import!
      // See OnlyImportDeclarationReferenceExample
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }
      // Ignore type matches referred by itself
      // See UnusedClassUsedByItself, UsedByInnerClass
      if (searchStart instanceof IType) {
        IType searchStartType = (IType) searchStart;
        IType matchPrimaryType = JavaElementUtil.getTypeFor(matchJavaElement, false);
        if (matchPrimaryType.equals(searchStartType)) {
          return true;
        }
      }
      // Bug 2864967: Ignore references for recursive methods
      if (matchJavaElement.equals(searchStart)) {
        return true;
      }
      return false;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678383
src/main/org/ucdetector/search/SearchManager.java 731 748
rc/main/org/ucdetector/action/AbstractUCDetectorAction.jav 57 81
----------------------------------------
  public static IJavaElement defaultIgnoreMatch(SearchMatch match) {
    // Ignore javadoc matches.
    // See JavaDocExample
    if (match.isInsideDocComment()) {
      return null;
    }
    // Ignore matches in jars, or matches caused by compile problems
    // See ReferenceInJarExample
    if (match.getAccuracy() == SearchMatch.A_INACCURATE) {
      return null;
    }
    Object matchElement = match.getElement();
    // Ignore no IJavaElement matches
    if (!(matchElement instanceof IJavaElement)) {
      return null;
    }
    return (IJavaElement) matchElement;
  }

----------------------------------------
      public IStatus run(IProgressMonitor monitor) {
        UCDProgressMonitor ucdMonitor = new UCDProgressMonitor(monitor);
        iterator.setMonitor(ucdMonitor);
        try {
          iterator.iterate(getSelections());
          if (iterator.getElelementsToDetectCount() == 0) {
            showNothingToDetectMessage();
          }
        }
        catch (CoreException e) {
          UCDetectorPlugin.logToEclipseLog(e.getStatus());
          //          return e.getStatus();
        }
        catch (Throwable e) {
          UCDetectorPlugin.logToEclipseLog(Messages.AbstractUCDetectorAction_AnalyzeFailedText, e);
        }
        IStatus status = null;
        try {
          status = postIteration();
        }
        finally {
          ucdMonitor.done();
        }
        return status != null ? status : ucdMonitor.isCanceled() ? Status.CANCEL_STATUS : Status.OK_STATUS;
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678384
src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java 249 267
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 252 261
----------------------------------------
  private boolean isOtherMarker(IMarker marker2) {
    // Don't add this marker 2 times!
    if (marker != marker2) {
      try {
        if (marker.getType().equals(marker2.getType())) {
          // Now we have a ucdetector marker!
          String sJavaType1 = (String) marker.getAttribute(MarkerFactory.JAVA_TYPE);
          String sJavaType2 = (String) marker2.getAttribute(MarkerFactory.JAVA_TYPE);
          ElementType javaType1 = ElementType.valueOf(sJavaType1);
          ElementType javaType2 = ElementType.valueOf(sJavaType2);
          return javaType1 == javaType2;
        }
      }
      catch (Exception e) {
        Log.error("Can't compare markers: " + e.getMessage());
      }
    }
    return false;
  }

----------------------------------------
      try {
        if (marker.getType().equals(marker2.getType())) {
          // Now we have a ucdetector marker!
          String sJavaType1 = (String) marker.getAttribute(MarkerFactory.JAVA_TYPE);
          String sJavaType2 = (String) marker2.getAttribute(MarkerFactory.JAVA_TYPE);
          ElementType javaType1 = ElementType.valueOf(sJavaType1);
          ElementType javaType2 = ElementType.valueOf(sJavaType2);
          return javaType1 == javaType2;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678386
src/cycle/org/ucdetector/cycle/model/CycleRegionIterator.java 31 45
rc/main/org/ucdetector/search/LineManger.jav 272 288
----------------------------------------
  private void getNext(List<? extends CycleBaseElement> elements, List<CycleRegion> results) {
    for (CycleBaseElement baseElement : elements) {
      if (baseElement == start) {
        startFound = true;
      }
      if (baseElement instanceof CycleRegion) {
        CycleRegion region = (CycleRegion) baseElement;
        results.add(region);
        if (startFound && first == null) {
          first = region;
        }
      }
      getNext(baseElement.getChildren(), results);
    }
  }

----------------------------------------
        if (annotation instanceof SingleMemberAnnotation) {
          Expression value = ((SingleMemberAnnotation) annotation).getValue();
          if (value instanceof ArrayInitializer) {
            ArrayInitializer arrayInitializer = (ArrayInitializer) value;
            List<?> expressions = arrayInitializer.expressions();
            for (Object oExpression : expressions) {
              if (isUcdTag((StringLiteral) oExpression)) {
                return true;
              }
            }
          }
          else if (value instanceof StringLiteral) {
            if (isUcdTag((StringLiteral) value)) {
              return true;
            }
          }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678387
src/cycle/org/ucdetector/cycle/model/CycleRegion.java 73 78
rc/cycle/org/ucdetector/cycle/model/CycleType.jav 69 77
----------------------------------------
  public String getText() {
    StringBuilder sb = new StringBuilder();
    sb.append(Messages.CycleRegion_Line).append(line);
    sb.append(": ").append(strLine); //$NON-NLS-1$
    return sb.toString();
  }

----------------------------------------
  public String getText() {
    StringBuilder sb = new StringBuilder();
    sb.append(super.getDefaultText(type)).append(' ');
    int size = getMatchCount();
    sb.append('(').append(size);
    sb.append(size < 2 ? Messages.CycleType_match : Messages.CycleType_matches);
    sb.append(')');
    return sb.toString();
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678388
src/cycle/org/ucdetector/cycle/CycleView.java 312 332
rc/cycle/org/ucdetector/cycle/CycleView.jav 316 328
----------------------------------------
      private void openInEditor(IJavaElement element, int offset, int length) {
        if (element == null) {
          return;
        }
        try {
          // part = JavaUI.openInEditor(element, activateOnOpen);
          IEditorPart part = JavaUI.openInEditor(element, true, false);
          if (part == null) {
            return;
          }
          if (offset != -1 && length != -1) {
            EditorUtility.revealInEditor(part, offset, length);
          }
          else {
            JavaUI.revealInEditor(part, element);
          }
        }
        catch (Exception e) {
          Log.error("Can't open javalement in editor: " + JavaElementUtil.getElementName(element), e); //$NON-NLS-1$
        }
      }

----------------------------------------
        try {
          // part = JavaUI.openInEditor(element, activateOnOpen);
          IEditorPart part = JavaUI.openInEditor(element, true, false);
          if (part == null) {
            return;
          }
          if (offset != -1 && length != -1) {
            EditorUtility.revealInEditor(part, offset, length);
          }
          else {
            JavaUI.revealInEditor(part, element);
          }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678389
src/cycle/org/ucdetector/cycle/CycleCalculator.java 109 122
rc/cycle/org/ucdetector/cycle/CycleView.jav 316 328
----------------------------------------
    for (Cycle cycleToAdd : cyclesFound) {
      boolean isContained = false;
      for (int i = 0; i < result.size(); i++) {
        Cycle cycleAlreadyAdded = result.get(i);
        if (cycleToAdd.contains(cycleAlreadyAdded)) {
          // because big cycles could be build by small cycles
          isContained = true;
          break;
        }
      }
      if (!isContained) {
        result.add(cycleToAdd);
      }
    }

----------------------------------------
        try {
          // part = JavaUI.openInEditor(element, activateOnOpen);
          IEditorPart part = JavaUI.openInEditor(element, true, false);
          if (part == null) {
            return;
          }
          if (offset != -1 && length != -1) {
            EditorUtility.revealInEditor(part, offset, length);
          }
          else {
            JavaUI.revealInEditor(part, element);
          }
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678390
src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java 305 311
rc/cycle/org/ucdetector/cycle/CycleView.jav 484 493
----------------------------------------
  protected final MarkerFactory getMarkerFactory() throws CoreException {
    if (markerFactory == null) {
      markerFactory = MarkerFactory.createInstance();
      markerFactory.startReport(objectsToIterate, timeStart);
    }
    return markerFactory;
  }

----------------------------------------
    private void internalSetSelection(TreeItem treeItem) {
      if (treeItem != null) {
        Object data = treeItem.getData();
        if (data != null) {
          viewer.setSelection(new StructuredSelection(data), true);
          // open previous/next match!
          openAction.run();
        }
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678391
src/main/org/ucdetector/report/ReportNameManager.java 91 104
rc/main/org/ucdetector/UCDetectorPlugin.jav 140 156
----------------------------------------
    for (int i = 1; i < 1000; i++) {
      String number = FORMAT_REPORT_NUMBER.format(i);
      boolean fileNumberFound = false;
      for (String file : files) {
        if (file.contains(number)) {
          fileNumberFound = true;
          break;
        }
      }
      if (!fileNumberFound) {
        freeFileNumber = number;
        return;
      }
    }

----------------------------------------
      public void propertyChange(PropertyChangeEvent event) {
        String property = event.getProperty();
        String newValue = event.getNewValue().toString();
        if (property.equals(Prefs.LOG_LEVEL)) {
          LogLevel newLogLevel = LogLevel.valueOf(newValue);
          Log.setActiveLogLevel(newLogLevel);
          if (newLogLevel.ordinal() > LogLevel.INFO.ordinal()) {
            System.out.println("UCDetector Log level: " + newLogLevel); // we need to log to System.out
          }
          else {
            Log.info("UCDetector Log level: " + newLogLevel);
          }
        }
        else if (property.equals(Prefs.LOG_TO_ECLIPSE)) {
          Log.setLogToEclipse(Boolean.parseBoolean(newValue));
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678392
src/main/org/ucdetector/search/LineManger.java 111 124
rc/main/org/ucdetector/UCDetectorPlugin.jav 351 358
----------------------------------------
  public int getLineEnd(IMember element) {
    try {
      ISourceRange sourceRange = element.getSourceRange();
      int offsetEnd = sourceRange.getOffset() + sourceRange.getLength();
      IScanner scanner = createScanner(element);
      if (scanner != null) {
        return scanner.getLineNumber(offsetEnd);
      }
    }
    catch (CoreException e) {
      Log.warn("Can't get LineEnd: %s", e); //$NON-NLS-1$
    }
    return LINE_NOT_FOUND;
  }

----------------------------------------
        if (aboutLine.length() > 0) {
          foundLines++;
          result.append(aboutLine);
          if (foundLines >= 3) {
            return result.toString();// Usually the first 3 line contain useful information
          }
          result.append(", ");
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678393
src/main/org/ucdetector/search/LineManger.java 126 139
rc/main/org/ucdetector/UCDetectorPlugin.jav 351 358
----------------------------------------
  public int getLineStart(IMember element) {
    try {
      ISourceRange javaDocRange = element.getJavadocRange();
      int offset = javaDocRange != null ? javaDocRange.getOffset() : element.getSourceRange().getOffset();
      IScanner scanner = createScanner(element);
      if (scanner != null) {
        return scanner.getLineNumber(offset);
      }
    }
    catch (CoreException e) {
      Log.warn("Can't get LineEnd: %s", e); //$NON-NLS-1$
    }
    return LINE_NOT_FOUND;
  }

----------------------------------------
        if (aboutLine.length() > 0) {
          foundLines++;
          result.append(aboutLine);
          if (foundLines >= 3) {
            return result.toString();// Usually the first 3 line contain useful information
          }
          result.append(", ");
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678394
src/main/org/ucdetector/quickfix/UCDQuickGenerator.java 32 63
rc/main/org/ucdetector/quickfix/UCDQuickGenerator.jav 33 58
----------------------------------------
  public IMarkerResolution[] getResolutions(IMarker marker) {
    try {
      String markerType = marker.getType();
      String javaTypeString = (String) marker.getAttribute(MarkerFactory.JAVA_TYPE);

      if (Log.isDebug()) {
        Log.debug("UCDQuickFixer.getResolutions() for: " + markerType); //$NON-NLS-1$
      }
      List<IMarkerResolution> resolutions = new ArrayList<IMarkerResolution>();
      if (MarkerFactory.UCD_MARKER_TYPE_UNUSED.equals(markerType)) {
        boolean isPrimaryType = (ElementType.valueOfSave(javaTypeString) == ElementType.PRIMARY_TYPE);
        resolutions.add(isPrimaryType ? new DeleteFileQuickFix(marker) : new DeleteQuickFix(marker));
        resolutions.add(new LineCommentQuickFix(marker));
      }
      else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals(markerType)
          || MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals(markerType)
          || MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals(markerType)) {
        resolutions.add(new VisibilityQuickFix(marker));
      }
      else if (MarkerFactory.UCD_MARKER_TYPE_USE_FINAL.equals(markerType)) {
        resolutions.add(new UseFinalQuickFix(marker));
      }
      resolutions.add(new NoUcdTagQuickFix(marker));
      resolutions.add(new UseSuppressWarningsQuickFix(marker));
      resolutions.add(new TodoQuickFix(marker));
      return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
    }
    catch (CoreException e) {
      Log.error("Can't get UCDetector resolutions for marker: " + marker, e); //$NON-NLS-1$
    }
    return new IMarkerResolution[0];
  }

----------------------------------------
    try {
      String markerType = marker.getType();
      String javaTypeString = (String) marker.getAttribute(MarkerFactory.JAVA_TYPE);

      if (Log.isDebug()) {
        Log.debug("UCDQuickFixer.getResolutions() for: " + markerType); //$NON-NLS-1$
      }
      List<IMarkerResolution> resolutions = new ArrayList<IMarkerResolution>();
      if (MarkerFactory.UCD_MARKER_TYPE_UNUSED.equals(markerType)) {
        boolean isPrimaryType = (ElementType.valueOfSave(javaTypeString) == ElementType.PRIMARY_TYPE);
        resolutions.add(isPrimaryType ? new DeleteFileQuickFix(marker) : new DeleteQuickFix(marker));
        resolutions.add(new LineCommentQuickFix(marker));
      }
      else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals(markerType)
          || MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals(markerType)
          || MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals(markerType)) {
        resolutions.add(new VisibilityQuickFix(marker));
      }
      else if (MarkerFactory.UCD_MARKER_TYPE_USE_FINAL.equals(markerType)) {
        resolutions.add(new UseFinalQuickFix(marker));
      }
      resolutions.add(new NoUcdTagQuickFix(marker));
      resolutions.add(new UseSuppressWarningsQuickFix(marker));
      resolutions.add(new TodoQuickFix(marker));
      return resolutions.toArray(new IMarkerResolution[resolutions.size()]);
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678395
src/main/org/ucdetector/search/FinalHandler.java 125 157
rc/main/org/ucdetector/search/FinalHandler.jav 126 151
----------------------------------------
    public void acceptSearchMatch(SearchMatch match) {
      try {
        Object matchElement = match.getElement();
        if (!(matchElement instanceof IJavaElement)) {
          return;
        }
        IJavaElement javaElement = (IJavaElement) matchElement;
        if (javaElement instanceof IMethod) {
          IMethod method = (IMethod) javaElement;
          // 2776029  final for fields initialized in subclass constructors
          // ignore write access from a constructor to a instance variable in the same class
          if (!Flags.isStatic(field.getFlags()) && method.isConstructor()) {
            if (JavaElementUtil.isInSameType(field, javaElement)) {
              return;
            }
          }
        }
        // ignore write access from the field declaration
        else if (javaElement instanceof IField) {
          return;
        }
        // static initializer: static {}
        // instance initializer: {}
        else if (javaElement instanceof IInitializer) {
          return;
        }
      }
      catch (JavaModelException e) {
        Log.info("Problem for search match %s: %s", match, e); //$NON-NLS-1$
      }
      this.fieldHasWriteAccessFromMethod = true;
      throw new OperationCanceledException("Cancel Search: Field is not final");//$NON-NLS-1$
    }

----------------------------------------
      try {
        Object matchElement = match.getElement();
        if (!(matchElement instanceof IJavaElement)) {
          return;
        }
        IJavaElement javaElement = (IJavaElement) matchElement;
        if (javaElement instanceof IMethod) {
          IMethod method = (IMethod) javaElement;
          // 2776029  final for fields initialized in subclass constructors
          // ignore write access from a constructor to a instance variable in the same class
          if (!Flags.isStatic(field.getFlags()) && method.isConstructor()) {
            if (JavaElementUtil.isInSameType(field, javaElement)) {
              return;
            }
          }
        }
        // ignore write access from the field declaration
        else if (javaElement instanceof IField) {
          return;
        }
        // static initializer: static {}
        // instance initializer: {}
        else if (javaElement instanceof IInitializer) {
          return;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678396
src/main/org/ucdetector/UCDHeadless.java 133 141
rc/main/org/ucdetector/iterator/AbstractUCDetectorIterator.jav 78 88
----------------------------------------
    if (resourcesToIterateString != null) {
      String[] resourcesList = resourcesToIterateString.split(",");
      for (String resourceName : resourcesList) {
        resourceName = resourceName.trim();
        if (resourceName.length() > 0) {
          result.add(resourceName);
        }
      }
    }

----------------------------------------
  public final void iterateAll() throws CoreException { // NO_UCD
    IProject[] projects = ResourcesPlugin.getWorkspace().getRoot().getProjects();
    List<IJavaProject> openProjects = new ArrayList<IJavaProject>();
    for (IProject tempProject : projects) {
      IJavaProject project = JavaCore.create(tempProject);
      if (project.isOpen()) {
        openProjects.add(project);
      }
    }
    iterate(openProjects);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678398
src/main/org/ucdetector/util/JavaElementUtil.java 168 178
rc/main/org/ucdetector/util/JavaElementUtil.jav 214 222
----------------------------------------
    while (parent != null) {
      if (parent instanceof IType) {
        result = (IType) parent;
        break;
      }
      if (parent instanceof ICompilationUnit) {
        result = ((ICompilationUnit) parent).findPrimaryType();
        break;
      }
      parent = parent.getParent();
    }

----------------------------------------
    while (parent != null) {
      if (parent instanceof IType) {
        lastType = (IType) parent;
      }
      else if (parent instanceof ICompilationUnit) {
        return lastType;
      }
      parent = parent.getParent();
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678399
src/main/org/ucdetector/util/JavaElementUtil.java 194 201
rc/main/org/ucdetector/util/JavaElementUtil.jav 291 299
----------------------------------------
  public static IType getTypeFor(IResource resource) {
    if (isJavaFile(resource)) {
      IJavaElement javaElement = JavaCore.create((IFile) resource);
      return getTypeFor(javaElement, true);
    }
    // Log.debug("Resource %s is not a accessible java file", resource);
    return null;
  }

----------------------------------------
  public static ICompilationUnit getCompilationUnitFor(IResource resource) {
    if (isJavaFile(resource)) {
      IJavaElement javaElement = JavaCore.create((IFile) resource);
      if (javaElement instanceof ICompilationUnit) {
        return (ICompilationUnit) javaElement;
      }
    }
    return null;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678400
src/main/org/ucdetector/util/JavaElementUtil.java 520 525
rc/main/org/ucdetector/util/JavaElementUtil.jav 494 514
----------------------------------------
  public static String getTypeName(IJavaElement element) {
    if (element instanceof IType) {
      return ((IType) element).getTypeQualifiedName('.');
    }
    return "class?";
  }

----------------------------------------
  public static String getElementName(IJavaElement element) {
    if (element == null) {
      return "null";
    }
    if (element instanceof IMethod) {
      return getMethodName((IMethod) element);
    }
    if (element instanceof IField) {
      return getFieldName((IField) element);
    }
    if (element instanceof IType) {
      return getTypeName(element);
    }
    if (element instanceof IPackageFragment && ((IPackageFragment) element).isDefaultPackage()) {
      return "default package";
    }
    if (element instanceof IImportContainer) {
      return "import declarations";
    }
    return element.getElementName();
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678401
src/main/org/ucdetector/search/VisibilityHandler.java 192 198
rc/main/org/ucdetector/util/JavaElementUtil.jav 494 514
----------------------------------------
    for (IJavaElement element : type.getChildren()) {
      if (element instanceof IMember) {
        if (Flags.isPublic(((IMember) element).getFlags())) {
          return true;
        }
      }
    }

----------------------------------------
  public static String getElementName(IJavaElement element) {
    if (element == null) {
      return "null";
    }
    if (element instanceof IMethod) {
      return getMethodName((IMethod) element);
    }
    if (element instanceof IField) {
      return getFieldName((IField) element);
    }
    if (element instanceof IType) {
      return getTypeName(element);
    }
    if (element instanceof IPackageFragment && ((IPackageFragment) element).isDefaultPackage()) {
      return "default package";
    }
    if (element instanceof IImportContainer) {
      return "import declarations";
    }
    return element.getElementName();
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678402
src/main/org/ucdetector/util/JavaElementUtil.java 494 514
rc/main/org/ucdetector/action/AbstractUCDetectorAction.jav 153 164
----------------------------------------
  public static String getElementName(IJavaElement element) {
    if (element == null) {
      return "null";
    }
    if (element instanceof IMethod) {
      return getMethodName((IMethod) element);
    }
    if (element instanceof IField) {
      return getFieldName((IField) element);
    }
    if (element instanceof IType) {
      return getTypeName(element);
    }
    if (element instanceof IPackageFragment && ((IPackageFragment) element).isDefaultPackage()) {
      return "default package";
    }
    if (element instanceof IImportContainer) {
      return "import declarations";
    }
    return element.getElementName();
  }

----------------------------------------
    for (Object selection : selections) {
      if (selection instanceof IJavaElement) {
        result.add((IJavaElement) selection);
      }
      else if (selection instanceof IProject) {
        IProject project = (IProject) selection;
        IJavaProject javaProject = JavaCore.create(project);
        if (javaProject.exists()) {
          result.add(javaProject);
        }
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678403
src/main/org/ucdetector/util/JavaElementUtil.java 655 695
rc/main/org/ucdetector/util/JavaElementUtil.jav 654 700
----------------------------------------
    try {
      if (member instanceof IType) {
        IType type = (IType) member;
        if (type.isAnnotation()) {
          return MemberInfo.Annotation;
        }
        if (type.isAnonymous()) {
          return MemberInfo.ClassAnonymous;
        }
        if (type.isEnum()) {
          return MemberInfo.Enum;
        }
        if (type.isInterface()) {
          return MemberInfo.Interface;
        }
        if (type.isLocal()) {
          return MemberInfo.ClassLocal;
        }
        if (type.isMember()) {
          return MemberInfo.ClassMember;
        }
        return MemberInfo.Class;
      }
      if (member instanceof IMethod) {
        IMethod method = (IMethod) member;
        if (method.isConstructor()) {
          return MemberInfo.Constructor;
        }
        return MemberInfo.Method;
      }
      if (member instanceof IField) {
        IField field = (IField) member;
        if (field.isEnumConstant()) {
          return MemberInfo.EnumConstant;
        }
        if (JavaElementUtil.isConstant(field)) {
          return MemberInfo.Constant;
        }
        return MemberInfo.Field;
      }
    }

----------------------------------------
  public static MemberInfo getMemberInfo(IMember member) {
    try {
      if (member instanceof IType) {
        IType type = (IType) member;
        if (type.isAnnotation()) {
          return MemberInfo.Annotation;
        }
        if (type.isAnonymous()) {
          return MemberInfo.ClassAnonymous;
        }
        if (type.isEnum()) {
          return MemberInfo.Enum;
        }
        if (type.isInterface()) {
          return MemberInfo.Interface;
        }
        if (type.isLocal()) {
          return MemberInfo.ClassLocal;
        }
        if (type.isMember()) {
          return MemberInfo.ClassMember;
        }
        return MemberInfo.Class;
      }
      if (member instanceof IMethod) {
        IMethod method = (IMethod) member;
        if (method.isConstructor()) {
          return MemberInfo.Constructor;
        }
        return MemberInfo.Method;
      }
      if (member instanceof IField) {
        IField field = (IField) member;
        if (field.isEnumConstant()) {
          return MemberInfo.EnumConstant;
        }
        if (JavaElementUtil.isConstant(field)) {
          return MemberInfo.Constant;
        }
        return MemberInfo.Field;
      }
    }
    catch (JavaModelException ex) {
      Log.error("Can't get memberTypeString for member: " + member, ex);
    }
    return null;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678407
src/main/org/ucdetector/search/VisibilityHandler.java 192 198
rc/cycle/org/ucdetector/cycle/model/Cycle.jav 73 85
----------------------------------------
    for (IJavaElement element : type.getChildren()) {
      if (element instanceof IMember) {
        if (Flags.isPublic(((IMember) element).getFlags())) {
          return true;
        }
      }
    }

----------------------------------------
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof Cycle)) {
      return false;
    }
    Cycle other = (Cycle) obj;
    if (cycleList.size() != other.cycleList.size()) {
      return false;
    }
    return contains(other);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678405
src/main/org/ucdetector/search/VisibilityHandler.java 132 145
rc/cycle/org/ucdetector/cycle/model/Cycle.jav 73 85
----------------------------------------
    else if (startElement instanceof IMethod) {
      IMethod method = (IMethod) startElement;
      if (method.isMainMethod()) {
        return false;
      }
      // Bug [ 2269486 ] Constants in Interfaces can't be Private
      if (JavaElementUtil.isInterfaceMethod(method)) {
        return false; // default visibility means public!
      }
      // Bug [ 2968753] protected abstract method cannot be made private
      if (Flags.isAbstract(method.getFlags())) {
        return false;
      }
    }

----------------------------------------
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof Cycle)) {
      return false;
    }
    Cycle other = (Cycle) obj;
    if (cycleList.size() != other.cycleList.size()) {
      return false;
    }
    return contains(other);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678404
src/main/org/ucdetector/search/VisibilityHandler.java 120 131
rc/cycle/org/ucdetector/cycle/model/Cycle.jav 73 85
----------------------------------------
    if (startElement instanceof IField) {
      IField field = (IField) startElement;
      if (field.isEnumConstant()) {
        // No modifier allowed for enum constants!
        return false;
      }
      if (JavaElementUtil.isInterfaceField(field)) {
        // fix bug [ 2269486 ] Constants in Interfaces Can't be Private
        // only public, static & final are permitted for interface fields
        return false; // default visibility means public!
      }
    }

----------------------------------------
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof Cycle)) {
      return false;
    }
    Cycle other = (Cycle) obj;
    if (cycleList.size() != other.cycleList.size()) {
      return false;
    }
    return contains(other);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678414
src/main/org/ucdetector/report/MarkerReport.java 69 102
rc/cycle/org/ucdetector/cycle/model/Cycle.jav 73 85
----------------------------------------
  private static ElementType getElementType(IMember javaElement) throws JavaModelException {
    if (javaElement instanceof IType) {
      IType type = (IType) javaElement;
      // isPrimary first -> delete file has priority
      if (JavaElementUtil.isPrimary(type)) {
        return ElementType.PRIMARY_TYPE;
      }
      if (type.isEnum()) {
        return ElementType.ENUM;
      }
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION;
      }
      if (type.isInterface()) {
        return ElementType.INTERFACE;
      }
      return ElementType.TYPE;
    }
    else if (javaElement instanceof IMethod) {
      IType type = JavaElementUtil.getTypeFor(javaElement, false);
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION_TYPE_MEMBER;
      }
      return ElementType.METHOD;
    }
    else if (javaElement instanceof IField) {
      IField field = (IField) javaElement;
      if (field.isEnumConstant()) {
        return ElementType.ENUM_CONSTANT;
      }
      return ElementType.FIELD;
    }
    return ElementType.UNKNOWN;
  }

----------------------------------------
  public boolean equals(Object obj) {
    if (this == obj) {
      return true;
    }
    if (!(obj instanceof Cycle)) {
      return false;
    }
    Cycle other = (Cycle) obj;
    if (cycleList.size() != other.cycleList.size()) {
      return false;
    }
    return contains(other);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678408
src/main/org/ucdetector/preferences/ModesPanel.java 87 108
rc/main/org/ucdetector/action/AbstractUCDetectorAction.jav 123 142
----------------------------------------
  private void createButtonsDetails() {
    newButton.setText(Messages.ModesPanel_ModeNew);
    removeButton.setText(Messages.ModesPanel_ModeRemove);
    renameButton.setText(Messages.ModesPanel_ModeRename);
    SelectionListener selectionListener = new SelectionAdapter() {
      @Override
      public void widgetSelected(SelectionEvent event) {
        if (event.widget == newButton) {
          addMode();
        }
        else if (event.widget == removeButton) {
          removeMode();
        }
        else if (event.widget == renameButton) {
          remameMode();
        }
      }
    };
    newButton.addSelectionListener(selectionListener);
    removeButton.addSelectionListener(selectionListener);
    renameButton.addSelectionListener(selectionListener);
  }

----------------------------------------
  private void getSelectedJavaElements(ISelection selection) {
    selections.clear();
    if (selection instanceof IStructuredSelection) {
      List<?> structered = ((IStructuredSelection) selection).toList();
      for (Object selectedObject : structered) {
        // Log.debug("selectedObject: " + selectedObject.getClass().getName()); //$NON-NLS-1$
        if (selectedObject instanceof IJavaElement) {
          selections.add(selectedObject);
        }
        else if (selectedObject instanceof IWorkingSet) {
          IAdaptable[] workingSetProjects = ((IWorkingSet) selectedObject).getElements();
          for (IAdaptable workingSetProject : workingSetProjects) {
            if (workingSetProject instanceof IProject) {
              selections.add(workingSetProject);
            }
          }
        }
      }
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678410
src/main/org/ucdetector/UCDHeadless.java 130 143
rc/main/org/ucdetector/search/LineManger.jav 227 234
----------------------------------------
  private static List<String> getResourcesToIterate(Map<String, String> options) {
    List<String> result = new ArrayList<String>();
    String resourcesToIterateString = options.get(HEADLESS_KEY + "resourcesToIterate");
    if (resourcesToIterateString != null) {
      String[] resourcesList = resourcesToIterateString.split(",");
      for (String resourceName : resourcesList) {
        resourceName = resourceName.trim();
        if (resourceName.length() > 0) {
          result.add(resourceName);
        }
      }
    }
    return result;
  }

----------------------------------------
            if (TagElement.TAG_AUTHOR.equals(tag.getTagName())) {
              @SuppressWarnings("unchecked")
              List<TextElement> fragments = tag.fragments();
              if (!fragments.isEmpty() && firstAuthor == null) {
                firstAuthor = fragments.get(0).getText();
                break;
              }
            }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678411
src/main/org/ucdetector/UCDHeadless.java 236 276
rc/main/org/ucdetector/UCDHeadless.jav 244 264
----------------------------------------
  private List<IJavaElement> getJavaElementsToIterate(IWorkspaceRoot workspaceRoot, List<IJavaProject> allProjects) {
    List<IJavaElement> javaElementsToIterate = new ArrayList<IJavaElement>();
    if (resourcesToIterate == null || resourcesToIterate.isEmpty()) {
      javaElementsToIterate.addAll(allProjects);
    }
    else {
      for (String resourceToIterate : resourcesToIterate) {
        Log.info("resourceToIterate: " + resourceToIterate);
        try {
          Path path = new Path(resourceToIterate);
          IJavaElement javaElement;
          if (path.segmentCount() == 1) {
            IProject project = workspaceRoot.getProject(resourceToIterate);
            javaElement = JavaCore.create(project);
            Log.info("resource=%s, javaProject=%s", resourceToIterate, javaElement.getElementName());
          }
          else {
            IFolder folder = workspaceRoot.getFolder(path);
            javaElement = JavaCore.create(folder);
            Log.info("resource=%s, folder=%s, javaElement=%s", resourceToIterate, folder,
                JavaElementUtil.getElementName(javaElement));
          }
          if (javaElement == null || !javaElement.exists()) {
            Log.warn("Ignore resource: '%s'. Possible reasons: It is not a java element, it does not exists",
                resourceToIterate);
            continue;
          }
          javaElementsToIterate.add(javaElement);
        }
        catch (Exception ex) {
          Log.warn("Ignore resource: '%s' because %s", resourceToIterate, ex);
        }
      }
    }
    // Logging
    Log.info("There are %s java elements to iterate", String.valueOf(javaElementsToIterate.size()));//$NON-NLS-1$
    for (IJavaElement javaElement : javaElementsToIterate) {
      Log.info("    " + JavaElementUtil.getElementName(javaElement));//$NON-NLS-1$
    }
    return javaElementsToIterate;
  }

----------------------------------------
        try {
          Path path = new Path(resourceToIterate);
          IJavaElement javaElement;
          if (path.segmentCount() == 1) {
            IProject project = workspaceRoot.getProject(resourceToIterate);
            javaElement = JavaCore.create(project);
            Log.info("resource=%s, javaProject=%s", resourceToIterate, javaElement.getElementName());
          }
          else {
            IFolder folder = workspaceRoot.getFolder(path);
            javaElement = JavaCore.create(folder);
            Log.info("resource=%s, folder=%s, javaElement=%s", resourceToIterate, folder,
                JavaElementUtil.getElementName(javaElement));
          }
          if (javaElement == null || !javaElement.exists()) {
            Log.warn("Ignore resource: '%s'. Possible reasons: It is not a java element, it does not exists",
                resourceToIterate);
            continue;
          }
          javaElementsToIterate.add(javaElement);
        }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678412
src/main/org/ucdetector/preferences/ModesWriter.java 99 111
rc/main/org/ucdetector/preferences/ModesWriter.jav 100 105
----------------------------------------
  private static void appendHeadlessProperties(StringBuilder sb) {
    try {
      if (headlessPropertiesContent == null) {
        InputStream in = ModesWriter.class.getResourceAsStream(HEADLESS_PROPERTIES);
        headlessPropertiesContent = UCDetectorPlugin.readAll(new InputStreamReader(in, UCDetectorPlugin.UTF_8));
      }
    }
    catch (IOException ex) {
      headlessPropertiesContent = "";
      Log.error(ex, "Can't read %s", HEADLESS_PROPERTIES);
    }
    sb.append(headlessPropertiesContent);
  }

----------------------------------------
    try {
      if (headlessPropertiesContent == null) {
        InputStream in = ModesWriter.class.getResourceAsStream(HEADLESS_PROPERTIES);
        headlessPropertiesContent = UCDetectorPlugin.readAll(new InputStreamReader(in, UCDetectorPlugin.UTF_8));
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678415
src/main/org/ucdetector/search/LineManger.java 111 124
rc/main/org/ucdetector/preferences/Prefs.jav 539 553
----------------------------------------
  public int getLineEnd(IMember element) {
    try {
      ISourceRange sourceRange = element.getSourceRange();
      int offsetEnd = sourceRange.getOffset() + sourceRange.getLength();
      IScanner scanner = createScanner(element);
      if (scanner != null) {
        return scanner.getLineNumber(offsetEnd);
      }
    }
    catch (CoreException e) {
      Log.warn("Can't get LineEnd: %s", e); //$NON-NLS-1$
    }
    return LINE_NOT_FOUND;
  }

----------------------------------------
  private static boolean isMatchFilter(String filterName, String name) {
    String[] filters = parseFilters(filterName);
    for (String regex : filters) {
      // IPackageFragmentRoot can be "", filter can be ""
      try {
        if (regex.length() > 0 && Pattern.matches(regex, name)) {
          return true;
        }
      }
      catch (PatternSyntaxException e) {
        Log.warn(e.getMessage());
      }
    }
    return false;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678416
src/main/org/ucdetector/search/LineManger.java 209 220
rc/main/org/ucdetector/search/LineManger.jav 221 237
----------------------------------------
      if (Prefs.isFilterDeprecated()) {
        Javadoc javadoc = declaration.getJavadoc();
        if (javadoc != null && javadoc.tags() != null) {
          @SuppressWarnings("unchecked")
          List<TagElement> tags = javadoc.tags();
          for (TagElement tag : tags) {
            if (TagElement.TAG_DEPRECATED.equals(tag.getTagName())) {
              ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
            }
          }
        }
      }

----------------------------------------
      if (declaration instanceof AbstractTypeDeclaration) {
        Javadoc javadoc = declaration.getJavadoc();
        if (javadoc != null && javadoc.tags() != null) {
          @SuppressWarnings("unchecked")
          List<TagElement> tags = javadoc.tags();
          for (TagElement tag : tags) {
            if (TagElement.TAG_AUTHOR.equals(tag.getTagName())) {
              @SuppressWarnings("unchecked")
              List<TextElement> fragments = tag.fragments();
              if (!fragments.isEmpty() && firstAuthor == null) {
                firstAuthor = fragments.get(0).getText();
                break;
              }
            }
          }
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678417
src/main/org/ucdetector/search/LineManger.java 270 291
rc/main/org/ucdetector/search/LineManger.jav 271 289
----------------------------------------
    private static boolean isSuppressWarningsUCDetector(Annotation annotation, String name) {
      if (SuppressWarnings.class.getName().equals(name) || SuppressWarnings.class.getSimpleName().equals(name)) {
        if (annotation instanceof SingleMemberAnnotation) {
          Expression value = ((SingleMemberAnnotation) annotation).getValue();
          if (value instanceof ArrayInitializer) {
            ArrayInitializer arrayInitializer = (ArrayInitializer) value;
            List<?> expressions = arrayInitializer.expressions();
            for (Object oExpression : expressions) {
              if (isUcdTag((StringLiteral) oExpression)) {
                return true;
              }
            }
          }
          else if (value instanceof StringLiteral) {
            if (isUcdTag((StringLiteral) value)) {
              return true;
            }
          }
        }
      }
      return false;
    }

----------------------------------------
      if (SuppressWarnings.class.getName().equals(name) || SuppressWarnings.class.getSimpleName().equals(name)) {
        if (annotation instanceof SingleMemberAnnotation) {
          Expression value = ((SingleMemberAnnotation) annotation).getValue();
          if (value instanceof ArrayInitializer) {
            ArrayInitializer arrayInitializer = (ArrayInitializer) value;
            List<?> expressions = arrayInitializer.expressions();
            for (Object oExpression : expressions) {
              if (isUcdTag((StringLiteral) oExpression)) {
                return true;
              }
            }
          }
          else if (value instanceof StringLiteral) {
            if (isUcdTag((StringLiteral) value)) {
              return true;
            }
          }
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678418
src/main/org/ucdetector/search/LineManger.java 374 388
rc/main/org/ucdetector/search/LineManger.jav 375 387
----------------------------------------
    if (lineEnds != null && chars != null) {
      for (int i = 0; i < lineEnds.length - 1; i++) {
        int start = lineEnds[i];
        int end = lineEnds[i + 1];
        if (start < offset && offset < end) {
          try {
            return String.valueOf(chars, start, end - start).trim();
          }
          catch (Exception e) {
            Log.error("Can't get piece of code for element: " //$NON-NLS-1$
                + JavaElementUtil.getElementName(element) + ", offset: " + offset, e); //$NON-NLS-1$
          }
        }
      }
    }

----------------------------------------
      for (int i = 0; i < lineEnds.length - 1; i++) {
        int start = lineEnds[i];
        int end = lineEnds[i + 1];
        if (start < offset && offset < end) {
          try {
            return String.valueOf(chars, start, end - start).trim();
          }
          catch (Exception e) {
            Log.error("Can't get piece of code for element: " //$NON-NLS-1$
                + JavaElementUtil.getElementName(element) + ", offset: " + offset, e); //$NON-NLS-1$
          }
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678419
src/main/org/ucdetector/report/ReportExtension.java 78 119
rc/main/org/ucdetector/report/ReportExtension.jav 79 118
----------------------------------------
  private static void loadExtensions() {
    if (!isInitialized) {
      isInitialized = true;
      xsltExtensions = new ArrayList<ReportExtension>();
      classExtensions = new ArrayList<ReportExtension>();
      allExtensions = new ArrayList<ReportExtension>();
      IExtensionRegistry reg = Platform.getExtensionRegistry();
      IConfigurationElement[] reports = reg.getConfigurationElementsFor(EXTENSION_POINT_ID);
      for (IConfigurationElement report : reports) {
        String resultFile = report.getAttribute("resultFile"); //$NON-NLS-1$
        String name = report.getAttribute("description");//$NON-NLS-1$
        String xslt = report.getAttribute(ATTRIBUTE_STYLESHEET);
        String clazz = report.getAttribute(ATTRIBUTE_CLASS);
        String id = report.getAttribute(ATTRIBUTE_REPORT_ID);
        if (xslt != null && clazz == null) {
          boolean xsltFound = ReportExtension.class.getClassLoader().getResourceAsStream(xslt) != null;
          if (xsltFound) {
            xsltExtensions.add(new ReportExtension(resultFile, name, xslt, null, id));
          }
          else if (xslt.endsWith("custom.xslt")) { //$NON-NLS-1$
            Log.info("Tip: To create custom reports rename file to custom.xslt: org.ucdetector_x.y.z.jar/org/ucdetector/report/__custom.xslt"); //$NON-NLS-1$
          }
        }
        else if (xslt == null && clazz != null) {
          try {
            //IUCDetectorReport reportObject = (IUCDetectorReport) WorkbenchPlugin.createExtension(report, ATTRIBUTE_CLASS);
            IUCDetectorReport reportObject = (IUCDetectorReport) report.createExecutableExtension(ATTRIBUTE_CLASS);// This line fixes headless exception
            classExtensions.add(new ReportExtension(resultFile, name, null, reportObject, id));
          }
          // Catch Throwable here because of headless problem here: java.lang.UnsatisfiedLinkError: Could not load SWT library. R
          catch (Throwable ex) {
            UCDetectorPlugin.logToEclipseLog("Can't load ReportExtension", ex); //$NON-NLS-1$
          }
        }
        else {
          Log.warn("One attribute needed: '%s' or '%s'", ATTRIBUTE_CLASS, ATTRIBUTE_STYLESHEET);//$NON-NLS-1$
        }
      }
      allExtensions.addAll(classExtensions);
      allExtensions.addAll(xsltExtensions);
    }
  }

----------------------------------------
    if (!isInitialized) {
      isInitialized = true;
      xsltExtensions = new ArrayList<ReportExtension>();
      classExtensions = new ArrayList<ReportExtension>();
      allExtensions = new ArrayList<ReportExtension>();
      IExtensionRegistry reg = Platform.getExtensionRegistry();
      IConfigurationElement[] reports = reg.getConfigurationElementsFor(EXTENSION_POINT_ID);
      for (IConfigurationElement report : reports) {
        String resultFile = report.getAttribute("resultFile"); //$NON-NLS-1$
        String name = report.getAttribute("description");//$NON-NLS-1$
        String xslt = report.getAttribute(ATTRIBUTE_STYLESHEET);
        String clazz = report.getAttribute(ATTRIBUTE_CLASS);
        String id = report.getAttribute(ATTRIBUTE_REPORT_ID);
        if (xslt != null && clazz == null) {
          boolean xsltFound = ReportExtension.class.getClassLoader().getResourceAsStream(xslt) != null;
          if (xsltFound) {
            xsltExtensions.add(new ReportExtension(resultFile, name, xslt, null, id));
          }
          else if (xslt.endsWith("custom.xslt")) { //$NON-NLS-1$
            Log.info("Tip: To create custom reports rename file to custom.xslt: org.ucdetector_x.y.z.jar/org/ucdetector/report/__custom.xslt"); //$NON-NLS-1$
          }
        }
        else if (xslt == null && clazz != null) {
          try {
            //IUCDetectorReport reportObject = (IUCDetectorReport) WorkbenchPlugin.createExtension(report, ATTRIBUTE_CLASS);
            IUCDetectorReport reportObject = (IUCDetectorReport) report.createExecutableExtension(ATTRIBUTE_CLASS);// This line fixes headless exception
            classExtensions.add(new ReportExtension(resultFile, name, null, reportObject, id));
          }
          // Catch Throwable here because of headless problem here: java.lang.UnsatisfiedLinkError: Could not load SWT library. R
          catch (Throwable ex) {
            UCDetectorPlugin.logToEclipseLog("Can't load ReportExtension", ex); //$NON-NLS-1$
          }
        }
        else {
          Log.warn("One attribute needed: '%s' or '%s'", ATTRIBUTE_CLASS, ATTRIBUTE_STYLESHEET);//$NON-NLS-1$
        }
      }
      allExtensions.addAll(classExtensions);
      allExtensions.addAll(xsltExtensions);
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678420
src/main/org/ucdetector/iterator/HeadlessExtension.java 53 75
rc/main/org/ucdetector/iterator/HeadlessExtension.jav 54 74
----------------------------------------
  private static void loadExtensions() {
    if (!isInitialized) {
      Log.info("Load HeadlessExtensions"); //$NON-NLS-1$
      isInitialized = true;
      headlessExtensionList = new ArrayList<HeadlessExtension>();
      IExtensionRegistry reg = Platform.getExtensionRegistry();
      IConfigurationElement[] elements = reg.getConfigurationElementsFor(EXTENSION_POINT_ID);
      for (IConfigurationElement element : elements) {
        try {
          String id = element.getAttribute(ATTRIBUTE_ID);
          Integer ordinal = Integer.valueOf(element.getAttribute(ATTRIBUTE_ORDINAL));
          AbstractUCDetectorIterator iterator = (AbstractUCDetectorIterator) WorkbenchPlugin.createExtension(//
              element, ATTRIBUTE_CLASS);
          Log.info("Found HeadlessExtension: %s, %s", id, element.getAttribute(ATTRIBUTE_CLASS)); //$NON-NLS-1$
          headlessExtensionList.add(new HeadlessExtension(iterator, id, ordinal));
        }
        catch (Exception ex) {
          UCDetectorPlugin.logToEclipseLog("Can't load ReportExtension", ex); //$NON-NLS-1$
        }
      }
      Log.info("Found HeadlessExtensions : " + headlessExtensionList.size()); //$NON-NLS-1$
    }
  }

----------------------------------------
    if (!isInitialized) {
      Log.info("Load HeadlessExtensions"); //$NON-NLS-1$
      isInitialized = true;
      headlessExtensionList = new ArrayList<HeadlessExtension>();
      IExtensionRegistry reg = Platform.getExtensionRegistry();
      IConfigurationElement[] elements = reg.getConfigurationElementsFor(EXTENSION_POINT_ID);
      for (IConfigurationElement element : elements) {
        try {
          String id = element.getAttribute(ATTRIBUTE_ID);
          Integer ordinal = Integer.valueOf(element.getAttribute(ATTRIBUTE_ORDINAL));
          AbstractUCDetectorIterator iterator = (AbstractUCDetectorIterator) WorkbenchPlugin.createExtension(//
              element, ATTRIBUTE_CLASS);
          Log.info("Found HeadlessExtension: %s, %s", id, element.getAttribute(ATTRIBUTE_CLASS)); //$NON-NLS-1$
          headlessExtensionList.add(new HeadlessExtension(iterator, id, ordinal));
        }
        catch (Exception ex) {
          UCDetectorPlugin.logToEclipseLog("Can't load ReportExtension", ex); //$NON-NLS-1$
        }
      }
      Log.info("Found HeadlessExtensions : " + headlessExtensionList.size()); //$NON-NLS-1$
    }

----------------------------------------
