$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719760
src/main/org/ucdetector/preferences/Prefs.java 425 433
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 289 296
----------------------------------------
  private static boolean isConstant(IMember member) {
    try {
      return Flags.isStatic(member.getFlags()) && Flags.isFinal(member.getFlags());
    }
    catch (JavaModelException e) {
      Log.error("Can't get isConstant for: " + member, e);
      return false;
    }
  }

----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678385
src/main/org/ucdetector/util/JavaElementUtil.java 468 476
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 289 296
----------------------------------------
  public static IMethod getMainMethod(IType member) throws JavaModelException {
    IMethod[] methods = member.getMethods();
    for (IMethod method : methods) {
      if (method.isMainMethod()) {
        return method;
      }
    }
    return null;
  }

----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719780
src/main/org/ucdetector/quickfix/UCDQuickGenerator.java 65 73
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 289 296
----------------------------------------
  public boolean hasResolutions(IMarker marker) {
    try {
      return !MarkerFactory.UCD_MARKER_TYPE_USED_FEW.equals(marker.getType());
    }
    catch (CoreException e) {
      Log.error("Can't get UCD resolutions for marker: " + marker, e); //$NON-NLS-1$
      return false;
    }
  }

----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719762
src/main/org/ucdetector/report/MarkerReport.java 115 123
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 289 296
----------------------------------------
    public static ElementType valueOfSave(String valueString) {
      try {
        return ElementType.valueOf(valueString);
      }
      catch (Exception ex) {
        Log.error(String.format("Unknown ElementType: '%s'", valueString), ex); //$NON-NLS-1$
        return null;
      }
    }

----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719765
src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java 289 296
rc/main/org/ucdetector/util/JavaElementUtil.jav 828 837
----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
  private static IJavaSearchScope createWorkspaceScope(int includeMask) {
    try {
      IJavaProject[] projects = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProjects();
      return SearchEngine.createJavaSearchScope(projects, includeMask);
    }
    catch (JavaModelException e) {
      // ignore, use workspace scope instead
    }
    return SearchEngine.createWorkspaceScope();
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719766
src/cycle/org/ucdetector/cycle/model/CycleRegion.java 37 43
rc/main/org/ucdetector/search/SearchManager.jav 79 85
----------------------------------------
  public CycleRegion(CycleMember cycleMember, int offset, int length, int line, String strLine) {
    this.cycleMember = cycleMember;
    this.offset = offset;
    this.length = length;
    this.line = line;
    this.strLine = strLine;
  }

----------------------------------------
  public SearchManager(UCDProgressMonitor monitor, int searchTotal, MarkerFactory markerFactory) {
    this.monitor = monitor;
    this.searchTotal = searchTotal;
    this.markerFactory = markerFactory;
    this.finalHandler = new FinalHandler(markerFactory);
    ReportParam.lineManager = lineManger;// Hack :-(
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719767
src/main/org/ucdetector/report/ReportExtension.java 42 48
rc/main/org/ucdetector/search/SearchManager.jav 79 85
----------------------------------------
  private ReportExtension(String resultFile, String description, String xslt, IUCDetectorReport report, String id) {
    this.resultFile = resultFile;
    this.description = description;
    this.xslt = xslt;
    this.report = report;
    this.id = id;
  }

----------------------------------------
  public SearchManager(UCDProgressMonitor monitor, int searchTotal, MarkerFactory markerFactory) {
    this.monitor = monitor;
    this.searchTotal = searchTotal;
    this.markerFactory = markerFactory;
    this.finalHandler = new FinalHandler(markerFactory);
    ReportParam.lineManager = lineManger;// Hack :-(
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719771
src/main/org/ucdetector/UCDetectorPlugin.java 299 308
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 136 145
----------------------------------------
  public static void closeSave(Closeable closable) {
    if (closable != null) {
      try {
        closable.close();
      }
      catch (Exception e) {
        Log.warn("Can't close %s: %s", closable, e); //$NON-NLS-1$
      }
    }
  }

----------------------------------------
    finally {
      try {
        if (originalUnit != null) {
          RefactoringFileBuffers.release(originalUnit);
        }
      }
      catch (CoreException e) {
        UCDetectorPlugin.logToEclipseLog(QUICK_FIX_PROBLEMS, e);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719770
src/main/org/ucdetector/preferences/Prefs.java 541 551
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 136 145
----------------------------------------
    for (String regex : filters) {
      // IPackageFragmentRoot can be "", filter can be ""
      try {
        if (regex.length() > 0 && Pattern.matches(regex, name)) {
          return true;
        }
      }
      catch (PatternSyntaxException e) {
        Log.warn(e.getMessage());
      }
    }

----------------------------------------
    finally {
      try {
        if (originalUnit != null) {
          RefactoringFileBuffers.release(originalUnit);
        }
      }
      catch (CoreException e) {
        UCDetectorPlugin.logToEclipseLog(QUICK_FIX_PROBLEMS, e);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719769
src/main/org/ucdetector/util/MarkerFactory.java 82 92
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 136 145
----------------------------------------
  public static String ucdMarkerTypeToNiceString(IMarker marker) {
    try {
      if (marker != null) {
        return markerMap.get(marker.getType());
      }
    }
    catch (CoreException e) {
      Log.warn("Can't get marker type: " + e);
    }
    return null;
  }

----------------------------------------
    finally {
      try {
        if (originalUnit != null) {
          RefactoringFileBuffers.release(originalUnit);
        }
      }
      catch (CoreException e) {
        UCDetectorPlugin.logToEclipseLog(QUICK_FIX_PROBLEMS, e);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678406
src/main/org/ucdetector/search/VisibilityHandler.java 192 198
rc/main/org/ucdetector/search/LineManger.jav 198 206
----------------------------------------
    for (IJavaElement element : type.getChildren()) {
      if (element instanceof IMember) {
        if (Flags.isPublic(((IMember) element).getFlags())) {
          return true;
        }
      }
    }

----------------------------------------
      for (Object modifier : declaration.modifiers()) {
        // System.out.println("modifier=" + modifier + Log.getClassName(modifier));
        if (modifier instanceof Annotation) {
          Annotation annotation = (Annotation) modifier;
          if (isIgnoreAnnotation(annotation)) {
            ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
          }
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719772
src/main/org/ucdetector/search/LineManger.java 198 206
rc/main/org/ucdetector/quickfix/AbstractUCDQuickFix.jav 213 222
----------------------------------------
      for (Object modifier : declaration.modifiers()) {
        // System.out.println("modifier=" + modifier + Log.getClassName(modifier));
        if (modifier instanceof Annotation) {
          Annotation annotation = (Annotation) modifier;
          if (isIgnoreAnnotation(annotation)) {
            ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
          }
        }
      }

----------------------------------------
    for (Object child : list) {
      if (child instanceof Modifier) {
        Modifier modifier = (Modifier) child;
        if (modifier.getKeyword().equals(ModifierKeyword.PUBLIC_KEYWORD)
            || modifier.getKeyword().equals(ModifierKeyword.PROTECTED_KEYWORD)
            || modifier.getKeyword().equals(ModifierKeyword.PRIVATE_KEYWORD)) {
          return modifier;
        }
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719773
src/main/org/ucdetector/search/SearchManager.java 207 247
rc/main/org/ucdetector/search/SearchManager.jav 252 293
----------------------------------------
  private void searchSpecific(IMethod method) throws CoreException {
    monitor.worked(1);
    IType type = JavaElementUtil.getTypeFor(method, false);
    if (type.isAnonymous()) {
      return;// Ignore anonymous types
    }
    if (noRefTypes.contains(type)) {
      return; // Ignore types, which have no references
    }
    if (JavaElementUtil.isMethodOfJavaLangObject(method)) {
      return; // Ignore methods from java.lang.Object
    }
    if (JavaElementUtil.isSerializationMethod(method)) {
      return; // Ignore serialization methods
    }
    int line = lineManger.getLine(method);
    if (line == LineManger.LINE_NOT_FOUND) {
      logIgnore("Ignore method " + method.getElementName()); //$NON-NLS-1$
      return;
    }
    String searchInfo = JavaElementUtil.getMemberTypeString(method);
    updateMonitorMessage(method, "override/implements", searchInfo); //$NON-NLS-1$

    // it is very expensive to call this method!!!
    StopWatch stop = new StopWatch(method);
    boolean isOverriddenMethod = JavaElementUtil.isOverriddenMethod(method);
    stop.end("    Calculate if is overridden method"); //$NON-NLS-1$

    StopWatch watch = new StopWatch(method);
    if (!isOverriddenMethod) {
      updateMonitorMessage(method, SEARCH_FINAL_MESSAGE, searchInfo);
      boolean created = finalHandler.createFinalMarker(method, line);
      watch.end("    Calculate method final marker"); //$NON-NLS-1$
      if (created) {
        markerCreated++;
      }
    }
    updateMonitorMessage(method, Messages.SearchManager_SearchReferences, searchInfo);
    searchImpl(method, searchInfo, isOverriddenMethod);
    watch.end("    searchImpl"); //$NON-NLS-1$
  }

----------------------------------------
  private void searchSpecific(IField field) throws CoreException {
    monitor.worked(1);
    int line = lineManger.getLine(field);
    if (line == LineManger.LINE_NOT_FOUND) {
      logIgnore("Ignore field " + field.getElementName()); //$NON-NLS-1$
      return;
    }
    String searchInfo = JavaElementUtil.getMemberTypeString(field);
    updateMonitorMessage(field, SEARCH_FINAL_MESSAGE, searchInfo);
    StopWatch watch = new StopWatch(field);
    if (JavaElementUtil.isSerializationField(field)) {
      return;
    }
    // We create final markers even for classes which have no references
    boolean created = finalHandler.createFinalMarker(field, line);
    watch.end("    Calculate field final marker"); //$NON-NLS-1$
    if (created) {
      markerCreated++;
    }
    if (Flags.isPrivate(field.getFlags())) {
      return;
    }
    IType type = JavaElementUtil.getTypeFor(field, false);
    if (noRefTypes.contains(type)) {
      return;
    }
    if (type.isAnonymous()) {
      return; // Ignore anonymous classes
    }
    if (usedByValueEnumsCache.contains(type)) {
      return;// See bug 2900561: enum detection, or don't create "unnecessary marker" for enum constants
    }
    updateMonitorMessage(field, Messages.SearchManager_SearchReferences, searchInfo);
    int found = searchImpl(field, searchInfo, false);
    watch.end("    searchImpl"); //$NON-NLS-1$
    if (found > 0 && !hasReadAccess(field)) {
      String message = NLS.bind(Messages.MarkerFactory_MarkerReferenceFieldNeverRead,
          new Object[] { JavaElementUtil.getElementName(field) });
      // found=0 needed here, to create reference marker!
      markerFactory.createReferenceMarker(field, message, line, 0);
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719774
src/cycle/org/ucdetector/cycle/CycleView.java 485 492
rc/main/org/ucdetector/iterator/AbstractUCDetectorIterator.jav 120 126
----------------------------------------
      if (treeItem != null) {
        Object data = treeItem.getData();
        if (data != null) {
          viewer.setSelection(new StructuredSelection(data), true);
          // open previous/next match!
          openAction.run();
        }
      }

----------------------------------------
    finally {
      if (markerFactory != null) {
        markerFactory.endReport();
        timeEnd = System.currentTimeMillis();
        Log.info("Detection time: " + StopWatch.timeAsString(timeEnd - timeStart)); //$NON-NLS-1$
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719775
src/main/org/ucdetector/UCDApplication.java 66 71
rc/main/org/ucdetector/iterator/AbstractUCDetectorIterator.jav 120 126
----------------------------------------
  public void stop() {
    Log.info("Stopping UCDHeadless as an application");
    if (systemInReader != null) {
      systemInReader.interrupt();
    }
  }

----------------------------------------
    finally {
      if (markerFactory != null) {
        markerFactory.endReport();
        timeEnd = System.currentTimeMillis();
        Log.info("Detection time: " + StopWatch.timeAsString(timeEnd - timeStart)); //$NON-NLS-1$
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719777
src/cycle/org/ucdetector/cycle/CycleAction.java 38 44
rc/main/org/ucdetector/iterator/AbstractUCDetectorIterator.jav 120 126
----------------------------------------
        try {
          UCDetectorPlugin.getActivePage().showView(CycleView.ID);
          CycleView view = CycleView.getInstance();
          if (view != null) {
            view.refresh();
          }
        }

----------------------------------------
    finally {
      if (markerFactory != null) {
        markerFactory.endReport();
        timeEnd = System.currentTimeMillis();
        Log.info("Detection time: " + StopWatch.timeAsString(timeEnd - timeStart)); //$NON-NLS-1$
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719776
src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java 120 126
rc/cycle/org/ucdetector/cycle/CycleView.jav 216 222
----------------------------------------
    finally {
      if (markerFactory != null) {
        markerFactory.endReport();
        timeEnd = System.currentTimeMillis();
        Log.info("Detection time: " + StopWatch.timeAsString(timeEnd - timeStart)); //$NON-NLS-1$
      }
    }

----------------------------------------
      public void run() {
        Cycle cycle = (Cycle) getFirstSelectedElement();
        if (cycle != null) {
          cycle.rotate();
          refresh();
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719798
src/cycle/org/ucdetector/cycle/CycleView.java 485 492
rc/cycle/org/ucdetector/cycle/CycleView.jav 216 222
----------------------------------------
      if (treeItem != null) {
        Object data = treeItem.getData();
        if (data != null) {
          viewer.setSelection(new StructuredSelection(data), true);
          // open previous/next match!
          openAction.run();
        }
      }

----------------------------------------
      public void run() {
        Cycle cycle = (Cycle) getFirstSelectedElement();
        if (cycle != null) {
          cycle.rotate();
          refresh();
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719796
src/main/org/ucdetector/UCDApplication.java 66 71
rc/cycle/org/ucdetector/cycle/CycleView.jav 216 222
----------------------------------------
  public void stop() {
    Log.info("Stopping UCDHeadless as an application");
    if (systemInReader != null) {
      systemInReader.interrupt();
    }
  }

----------------------------------------
      public void run() {
        Cycle cycle = (Cycle) getFirstSelectedElement();
        if (cycle != null) {
          cycle.rotate();
          refresh();
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719786
src/cycle/org/ucdetector/cycle/CycleAction.java 38 44
rc/cycle/org/ucdetector/cycle/CycleView.jav 216 222
----------------------------------------
        try {
          UCDetectorPlugin.getActivePage().showView(CycleView.ID);
          CycleView view = CycleView.getInstance();
          if (view != null) {
            view.refresh();
          }
        }

----------------------------------------
      public void run() {
        Cycle cycle = (Cycle) getFirstSelectedElement();
        if (cycle != null) {
          cycle.rotate();
          refresh();
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719782
src/main/org/ucdetector/search/FinalHandler.java 46 66
rc/main/org/ucdetector/search/FinalHandler.jav 72 87
----------------------------------------
  boolean createFinalMarker(IMethod method, int line) throws CoreException {
    int flags = method.getFlags();
    if (line == LineManger.LINE_NOT_FOUND //
        || !Prefs.isCheckUseFinalMethod()//
        || Flags.isPrivate(flags) //
        || Flags.isStatic(flags) //
        || Flags.isAbstract(flags) //
        || Flags.isFinal(flags) //
        || method.isConstructor()//
        || method.isMainMethod()//
        // [2826205] Can't make interface methods final
        || JavaElementUtil.isInterfaceMethod(method) //
    ) {
      return false;
    }
    IType type = JavaElementUtil.getTypeFor(method, false);
    if (!JavaElementUtil.hasSubClasses(type)) {
      return false;
    }
    return markerFactory.createFinalMarker(method, line);
  }

----------------------------------------
  boolean createFinalMarker(IField field, int line) throws CoreException {
    int flags = field.getFlags();
    if (line == LineManger.LINE_NOT_FOUND //
        || !Prefs.isCheckUseFinalField() //
        || Flags.isFinal(flags)//
        || Flags.isVolatile(flags)// A field can be either final or volatile, not both
        || field.isEnumConstant()// No modifier allowed for enum constants!
        || JavaElementUtil.isInterfaceField(field) // [ 3396856 ] Fields in interfaces are already final
    ) {
      return false;
    }
    if (!canMakeFinal(field)) {
      return false;
    }
    return markerFactory.createFinalMarker(field, line);
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719787
src/cycle/org/ucdetector/cycle/model/CycleMember.java 35 40
rc/cycle/org/ucdetector/cycle/TypeAndMatches.jav 46 51
----------------------------------------
  public CycleMember(IJavaElement match) {
    if (match == null) {
      throw new IllegalArgumentException("match may not be null"); //$NON-NLS-1$
    }
    this.match = match;
  }

----------------------------------------
  TypeAndMatches(IType root) {
    if (root == null) {
      throw new IllegalArgumentException("root may not be null"); //$NON-NLS-1$
    }
    this.root = root;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719789
src/main/org/ucdetector/report/MarkerReport.java 115 123
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
    public static ElementType valueOfSave(String valueString) {
      try {
        return ElementType.valueOf(valueString);
      }
      catch (Exception ex) {
        Log.error(String.format("Unknown ElementType: '%s'", valueString), ex); //$NON-NLS-1$
        return null;
      }
    }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719791
src/main/org/ucdetector/quickfix/UCDQuickGenerator.java 65 73
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
  public boolean hasResolutions(IMarker marker) {
    try {
      return !MarkerFactory.UCD_MARKER_TYPE_USED_FEW.equals(marker.getType());
    }
    catch (CoreException e) {
      Log.error("Can't get UCD resolutions for marker: " + marker, e); //$NON-NLS-1$
      return false;
    }
  }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719788
src/main/org/ucdetector/preferences/Prefs.java 541 551
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
    for (String regex : filters) {
      // IPackageFragmentRoot can be "", filter can be ""
      try {
        if (regex.length() > 0 && Pattern.matches(regex, name)) {
          return true;
        }
      }
      catch (PatternSyntaxException e) {
        Log.warn(e.getMessage());
      }
    }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719792
src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java 289 296
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
  final String getMarkerType() {
    try {
      return marker.getType();
    }
    catch (CoreException e) {
      return null;
    }
  }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719790
src/main/org/ucdetector/UCDetectorPlugin.java 373 380
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
  public static String getHostName() {
    try {
      return java.net.InetAddress.getLocalHost().getHostName();
    }
    catch (Exception e) {
      return "?";
    }
  }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719793
src/main/org/ucdetector/preferences/Prefs.java 425 433
rc/main/org/ucdetector/search/SearchManager.jav 671 681
----------------------------------------
  private static boolean isConstant(IMember member) {
    try {
      return Flags.isStatic(member.getFlags()) && Flags.isFinal(member.getFlags());
    }
    catch (JavaModelException e) {
      Log.error("Can't get isConstant for: " + member, e);
      return false;
    }
  }

----------------------------------------
      if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
          // Bug fix: Static imports are not recognized - ID: 2783734
          return !Flags.isStatic(importDecl.getFlags());
        }
        catch (JavaModelException ex) {
          Log.error("Can't get flags of: " + importDecl.getElementName(), ex); //$NON-NLS-1$
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719795
src/main/org/ucdetector/iterator/UCDetectorIterator.java 77 83
rc/main/org/ucdetector/search/SearchManager.jav 684 690
----------------------------------------
    if (Prefs.isFilterClassContainingString() && type.getCompilationUnit() != null) {
      String classAsString = type.getCompilationUnit().getSource();
      if (Prefs.isFilterClassContainingString(classAsString)) {
        debugNotHandle(type, "isFilterClassContainingString"); //$NON-NLS-1$
        return false;
      }
    }

----------------------------------------
      if (searchStart instanceof IType) {
        IType searchStartType = (IType) searchStart;
        IType matchPrimaryType = JavaElementUtil.getTypeFor(matchJavaElement, false);
        if (matchPrimaryType.equals(searchStartType)) {
          return true;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719794
src/main/org/ucdetector/search/SearchManager.java 684 690
rc/main/org/ucdetector/search/VisibilityHandler.jav 165 171
----------------------------------------
      if (searchStart instanceof IType) {
        IType searchStartType = (IType) searchStart;
        IType matchPrimaryType = JavaElementUtil.getTypeFor(matchJavaElement, false);
        if (matchPrimaryType.equals(searchStartType)) {
          return true;
        }
      }

----------------------------------------
      if (visibilityMaxFound == Visibility.PRIVATE) {
        IType type = JavaElementUtil.getTypeFor(startElement, false);
        if (type != null && type.isEnum()) {
          // BUG 3124968: No private marker for enum methods/fields
          return false;
        }
      }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719800
src/main/org/ucdetector/UCDetectorConsole.java 43 53
rc/main/org/ucdetector/Log.jav 128 136
----------------------------------------
  public static void log(boolean isWarn, String formattedMessage, Throwable ex) {
    PrintStream stream = isWarn ? consoleStreamWarn : consoleStreamInfo;
    if (stream != null) {
      if (formattedMessage != null) {
        stream.println(formattedMessage);
      }
      if (ex != null) {
        ex.printStackTrace(stream);
      }
    }
  }

----------------------------------------
  private static void logImplStream(String message, Throwable ex, boolean isWarn) {
    PrintStream stream = isWarn ? System.err : System.out;
    if (message != null) {
      stream.println(message);
    }
    if (ex != null) {
      ex.printStackTrace(stream);
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719801
src/main/org/ucdetector/Log.java 128 136
rc/main/org/ucdetector/UCDetectorConsole.jav 45 52
----------------------------------------
  private static void logImplStream(String message, Throwable ex, boolean isWarn) {
    PrintStream stream = isWarn ? System.err : System.out;
    if (message != null) {
      stream.println(message);
    }
    if (ex != null) {
      ex.printStackTrace(stream);
    }
  }

----------------------------------------
    if (stream != null) {
      if (formattedMessage != null) {
        stream.println(formattedMessage);
      }
      if (ex != null) {
        ex.printStackTrace(stream);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719802
src/main/org/ucdetector/UCDetectorConsole.java 45 52
rc/main/org/ucdetector/util/StopWatch.jav 53 61
----------------------------------------
    if (stream != null) {
      if (formattedMessage != null) {
        stream.println(formattedMessage);
      }
      if (ex != null) {
        ex.printStackTrace(stream);
      }
    }

----------------------------------------
    if (doLog) {
      // Logging slow stuff
      if (Log.isDebug() && duration > MINIMUM_DURATION) {
        Log.debug(logMessage);
      }
      else if (duration > MINIMUM_DURATION_WARN) {
        Log.warn(logMessage);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719803
src/main/org/ucdetector/search/SearchManager.java 354 359
rc/main/org/ucdetector/search/SearchManager.jav 362 367
----------------------------------------
    if (isTestOnlyMatches && foundInTextFiles == 0) {
      created = markerFactory.createReferenceMarkerTestOnly(member, line);
      if (created) {
        markerCreated++;
      }
    }

----------------------------------------
    if (!isOverriddenMethod) {
      created = visibilityHandler.createMarker(line, found);
      if (created) {
        markerCreated++;
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719804
src/main/org/ucdetector/preferences/Prefs.java 234 242
rc/main/org/ucdetector/preferences/Prefs.jav 248 258
----------------------------------------
  public static boolean isFilterClassContainingString() {
    String[] strings = getStrings(FILTER_CONTAIN_STRING, true);
    for (String string : strings) {
      if (string.length() > 0) {
        return true;
      }
    }
    return false;
  }

----------------------------------------
  public static boolean isFilterClassContainingString(String classAsString) {
    String[] stringsToFindInFile = getStrings(FILTER_CONTAIN_STRING, false);
    for (String stringToFindInFile : stringsToFindInFile) {
      if (stringToFindInFile.trim().length() > 0) {
        if (classAsString != null && classAsString.contains(stringToFindInFile)) {
          return true;
        }
      }
    }
    return false;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719806
src/main/org/ucdetector/util/MarkerFactory.java 172 177
rc/main/org/ucdetector/util/MarkerFactory.jav 186 191
----------------------------------------
  public boolean createFinalMarker(IMethod method, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(method);
    String elementName = JavaElementUtil.getElementName(method);
    String message = NLS.bind(Messages.MarkerFactory_MarkerFinalMethod, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(method, message, line, UCD_MARKER_TYPE_USE_FINAL));
  }

----------------------------------------
  public boolean createFinalMarker(IField field, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(field);
    String elementName = JavaElementUtil.getElementName(field);
    String message = NLS.bind(Messages.MarkerFactory_MarkerFinalField, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(field, message, line, UCD_MARKER_TYPE_USE_FINAL));
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719808
src/main/org/ucdetector/util/MarkerFactory.java 172 177
rc/main/org/ucdetector/util/MarkerFactory.jav 214 219
----------------------------------------
  public boolean createFinalMarker(IMethod method, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(method);
    String elementName = JavaElementUtil.getElementName(method);
    String message = NLS.bind(Messages.MarkerFactory_MarkerFinalMethod, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(method, message, line, UCD_MARKER_TYPE_USE_FINAL));
  }

----------------------------------------
  public boolean createReferenceMarkerTestOnly(IMember member, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(member);
    String elementName = JavaElementUtil.getElementName(member);
    String message = NLS.bind(Messages.MarkerFactory_MarkerTestOnly, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(member, message, line, UCD_MARKER_TYPE_TEST_ONLY));
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719807
src/main/org/ucdetector/util/MarkerFactory.java 186 191
rc/main/org/ucdetector/util/MarkerFactory.jav 214 219
----------------------------------------
  public boolean createFinalMarker(IField field, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(field);
    String elementName = JavaElementUtil.getElementName(field);
    String message = NLS.bind(Messages.MarkerFactory_MarkerFinalField, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(field, message, line, UCD_MARKER_TYPE_USE_FINAL));
  }

----------------------------------------
  public boolean createReferenceMarkerTestOnly(IMember member, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString(member);
    String elementName = JavaElementUtil.getElementName(member);
    String message = NLS.bind(Messages.MarkerFactory_MarkerTestOnly, new Object[] { searchInfo, elementName });
    return reportMarker(new ReportParam(member, message, line, UCD_MARKER_TYPE_TEST_ONLY));
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678413
src/main/org/ucdetector/search/LineManger.java 198 206
rc/main/org/ucdetector/report/MarkerReport.jav 69 102
----------------------------------------
      for (Object modifier : declaration.modifiers()) {
        // System.out.println("modifier=" + modifier + Log.getClassName(modifier));
        if (modifier instanceof Annotation) {
          Annotation annotation = (Annotation) modifier;
          if (isIgnoreAnnotation(annotation)) {
            ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
          }
        }
      }

----------------------------------------
  private static ElementType getElementType(IMember javaElement) throws JavaModelException {
    if (javaElement instanceof IType) {
      IType type = (IType) javaElement;
      // isPrimary first -> delete file has priority
      if (JavaElementUtil.isPrimary(type)) {
        return ElementType.PRIMARY_TYPE;
      }
      if (type.isEnum()) {
        return ElementType.ENUM;
      }
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION;
      }
      if (type.isInterface()) {
        return ElementType.INTERFACE;
      }
      return ElementType.TYPE;
    }
    else if (javaElement instanceof IMethod) {
      IType type = JavaElementUtil.getTypeFor(javaElement, false);
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION_TYPE_MEMBER;
      }
      return ElementType.METHOD;
    }
    else if (javaElement instanceof IField) {
      IField field = (IField) javaElement;
      if (field.isEnumConstant()) {
        return ElementType.ENUM_CONSTANT;
      }
      return ElementType.FIELD;
    }
    return ElementType.UNKNOWN;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719810
src/main/org/ucdetector/report/MarkerReport.java 69 102
rc/main/org/ucdetector/util/JavaElementUtil.jav 655 695
----------------------------------------
  private static ElementType getElementType(IMember javaElement) throws JavaModelException {
    if (javaElement instanceof IType) {
      IType type = (IType) javaElement;
      // isPrimary first -> delete file has priority
      if (JavaElementUtil.isPrimary(type)) {
        return ElementType.PRIMARY_TYPE;
      }
      if (type.isEnum()) {
        return ElementType.ENUM;
      }
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION;
      }
      if (type.isInterface()) {
        return ElementType.INTERFACE;
      }
      return ElementType.TYPE;
    }
    else if (javaElement instanceof IMethod) {
      IType type = JavaElementUtil.getTypeFor(javaElement, false);
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION_TYPE_MEMBER;
      }
      return ElementType.METHOD;
    }
    else if (javaElement instanceof IField) {
      IField field = (IField) javaElement;
      if (field.isEnumConstant()) {
        return ElementType.ENUM_CONSTANT;
      }
      return ElementType.FIELD;
    }
    return ElementType.UNKNOWN;
  }

----------------------------------------
    try {
      if (member instanceof IType) {
        IType type = (IType) member;
        if (type.isAnnotation()) {
          return MemberInfo.Annotation;
        }
        if (type.isAnonymous()) {
          return MemberInfo.ClassAnonymous;
        }
        if (type.isEnum()) {
          return MemberInfo.Enum;
        }
        if (type.isInterface()) {
          return MemberInfo.Interface;
        }
        if (type.isLocal()) {
          return MemberInfo.ClassLocal;
        }
        if (type.isMember()) {
          return MemberInfo.ClassMember;
        }
        return MemberInfo.Class;
      }
      if (member instanceof IMethod) {
        IMethod method = (IMethod) member;
        if (method.isConstructor()) {
          return MemberInfo.Constructor;
        }
        return MemberInfo.Method;
      }
      if (member instanceof IField) {
        IField field = (IField) member;
        if (field.isEnumConstant()) {
          return MemberInfo.EnumConstant;
        }
        if (JavaElementUtil.isConstant(field)) {
          return MemberInfo.Constant;
        }
        return MemberInfo.Field;
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719814
src/main/org/ucdetector/report/MarkerReport.java 94 100
rc/main/org/ucdetector/report/MarkerReport.jav 87 93
----------------------------------------
    else if (javaElement instanceof IField) {
      IField field = (IField) javaElement;
      if (field.isEnumConstant()) {
        return ElementType.ENUM_CONSTANT;
      }
      return ElementType.FIELD;
    }

----------------------------------------
    else if (javaElement instanceof IMethod) {
      IType type = JavaElementUtil.getTypeFor(javaElement, false);
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION_TYPE_MEMBER;
      }
      return ElementType.METHOD;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
17719811
src/main/org/ucdetector/util/JavaElementUtil.java 678 684
rc/main/org/ucdetector/report/MarkerReport.jav 87 93
----------------------------------------
      if (member instanceof IMethod) {
        IMethod method = (IMethod) member;
        if (method.isConstructor()) {
          return MemberInfo.Constructor;
        }
        return MemberInfo.Method;
      }

----------------------------------------
    else if (javaElement instanceof IMethod) {
      IType type = JavaElementUtil.getTypeFor(javaElement, false);
      if (type.isAnnotation()) {
        return ElementType.ANNOTATION_TYPE_MEMBER;
      }
      return ElementType.METHOD;
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
24202694
src/main/org/ucdetector/search/LineManger.java 202 215
rc/main/org/ucdetector/search/LineManger.jav 215 227
----------------------------------------
          if (isIgnoreAnnotation(annotation)) {
            ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
          }
        }
      }
      // [ 2923567 ] Do not report markers for deprecated class members
      // All children for a class are ignored automatically. See SearchManager.noRefTypes
      if (Prefs.isFilterDeprecated()) {
        Javadoc javadoc = declaration.getJavadoc();
        if (javadoc != null && javadoc.tags() != null) {
          @SuppressWarnings("unchecked")
          List<TagElement> tags = javadoc.tags();
          for (TagElement tag : tags) {
            if (TagElement.TAG_DEPRECATED.equals(tag.getTagName())) {

----------------------------------------
            if (TagElement.TAG_DEPRECATED.equals(tag.getTagName())) {
              ignoreLines.add(Integer.valueOf(scanner.getLineNumber(name.getStartPosition())));
            }
          }
        }
      }
      if (declaration instanceof AbstractTypeDeclaration) {
        Javadoc javadoc = declaration.getJavadoc();
        if (javadoc != null && javadoc.tags() != null) {
          @SuppressWarnings("unchecked")
          List<TagElement> tags = javadoc.tags();
          for (TagElement tag : tags) {
            if (TagElement.TAG_AUTHOR.equals(tag.getTagName())) {

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
27223042
src/main/org/ucdetector/quickfix/UseFinalQuickFix.java 8 14
rc/main/org/ucdetector/quickfix/VisibilityQuickFix.jav 8 14
----------------------------------------
package org.ucdetector.quickfix;

import org.eclipse.core.resources.IMarker;
import org.eclipse.jdt.core.dom.BodyDeclaration;
import org.eclipse.jdt.core.dom.Modifier;
import org.eclipse.jdt.core.dom.rewrite.ListRewrite;
import org.eclipse.jface.text.BadLocationException;

----------------------------------------
package org.ucdetector.quickfix;

import org.eclipse.core.resources.IMarker;
import org.eclipse.jdt.core.dom.BodyDeclaration;
import org.eclipse.jdt.core.dom.Modifier;
import org.eclipse.jdt.core.dom.rewrite.ListRewrite;
import org.eclipse.jdt.internal.ui.JavaPluginImages;

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678376
src/cycle/org/ucdetector/cycle/CycleAction.java 37 48
rc/main/org/ucdetector/report/XmlReport.jav 119 133
----------------------------------------
      public void run() {
        try {
          UCDetectorPlugin.getActivePage().showView(CycleView.ID);
          CycleView view = CycleView.getInstance();
          if (view != null) {
            view.refresh();
          }
        }
        catch (PartInitException e) {
          status = UCDetectorPlugin.logToEclipseLog(Messages.CycleAction_cant_open_editor, e);
        }
      }

----------------------------------------
  public XmlReport() {
    initXML();
    if (UCDetectorPlugin.isHeadlessMode()) {
      Runtime.getRuntime().addShutdownHook(new Thread() {
        @Override
        public void run() {
          if (!endReportCalled) {
            Log.warn("Process interrupted? Try to write reports in ShutdownHook");
            writeReports(true);
            Log.warn("Wrote reports in ShutdownHook");
          }
        }
      });
    }
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678377
src/main/org/ucdetector/report/XmlReport.java 174 179
rc/main/org/ucdetector/preferences/Prefs.jav 316 321
----------------------------------------
  public boolean reportMarker(ReportParam reportParam) throws CoreException {
    if (initXMLException != null || !Prefs.isWriteReportFile()) {
      return true;
    }
    return reportMarkerImpl(reportParam);
  }

----------------------------------------
  public static String[] getFilePatternLiteralSearch() {
    if (isUCDetectionInLiterals()) {
      return getStrings(ANALYZE_LITERALS, true);
    }
    return EMPTY_ARRAY;
  }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678378
src/main/org/ucdetector/report/XmlReport.java 184 245
rc/main/org/ucdetector/report/XmlReport.jav 186 237
----------------------------------------
  private boolean reportMarkerImpl(ReportParam reportParam) {
    Element marker = null;
    try {
      markerCount++;
      //markers.appendChild(doc.createComment(" === Marker number " + markerCount));
      marker = doc.createElement("marker");
      markers.appendChild(marker);
      setMarkerAttributes(reportParam, marker);

      IMember javaElement = reportParam.getJavaElement();
      IResource resource = javaElement.getResource();
      // ===== Nodes =====
      appendChild(marker, "description", reportParam.getMessage());// NODE: Change visibility of MixedExample to default
      if (resource != null && resource.getRawLocation() != null) {
        // F:/ws/ucd/org.ucdetector.example/src/main/org/ucdetector/example/Bbb.java
        appendChild(marker, "file", resource.getRawLocation().toOSString());
      }
      appendProject(marker, javaElement);
      IPackageFragmentRoot sourceFolder = JavaElementUtil.getPackageFragmentRootFor(javaElement);
      if (sourceFolder != null && sourceFolder.getResource() != null) {
        IPath path = sourceFolder.getResource().getProjectRelativePath();
        if (path != null) {
          appendChild(marker, "sourceFolder", path.toString()); // NODE:  src/main
        }
      }
      IPackageFragment pack = JavaElementUtil.getPackageFor(javaElement);
      appendChild(marker, "package", pack.getElementName());
      IType type = JavaElementUtil.getTypeFor(javaElement, true);// NODE: UCDetectorPlugin
      appendChild(marker, "class", JavaElementUtil.getElementName(type));
      //
      Element javaTypeElement = appendChild(marker, "javaType", null);
      javaTypeElement.setAttribute("simple", JavaElementUtil.getMemberTypeStringSimple(javaElement));
      javaTypeElement.setAttribute("long", JavaElementUtil.getMemberTypeString(javaElement));
      MemberInfo memberInfo = JavaElementUtil.getMemberInfo(javaElement);
      if (memberInfo != null) {
        javaTypeElement.setAttribute("icon", memberInfo.getIcon());
      }

      if (javaElement instanceof IMethod) {
        IMethod method = (IMethod) javaElement;
        appendChild(marker, "method", JavaElementUtil.getSimpleMethodName(method)); // NODE: method
      }
      if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        appendChild(marker, "field", JavaElementUtil.getSimpleFieldName(field)); // NODE: field
      }
      if (reportParam.getAuthor() != null) {
        appendChild(marker, "author", reportParam.getAuthorTrimmed());
      }
      if (UCDetectorPlugin.isHeadlessMode() && markerCount % 50 == 0) {
        Log.info("Flush reports!");
        writeReports(false);
      }
    }
    catch (Throwable ex) {
      Log.error("XML problems", ex);
      if (marker != null) {
        appendChild(marker, "ExceptionForCreatingMarker", ex.getMessage());
      }
    }
    return true;
  }

----------------------------------------
    try {
      markerCount++;
      //markers.appendChild(doc.createComment(" === Marker number " + markerCount));
      marker = doc.createElement("marker");
      markers.appendChild(marker);
      setMarkerAttributes(reportParam, marker);

      IMember javaElement = reportParam.getJavaElement();
      IResource resource = javaElement.getResource();
      // ===== Nodes =====
      appendChild(marker, "description", reportParam.getMessage());// NODE: Change visibility of MixedExample to default
      if (resource != null && resource.getRawLocation() != null) {
        // F:/ws/ucd/org.ucdetector.example/src/main/org/ucdetector/example/Bbb.java
        appendChild(marker, "file", resource.getRawLocation().toOSString());
      }
      appendProject(marker, javaElement);
      IPackageFragmentRoot sourceFolder = JavaElementUtil.getPackageFragmentRootFor(javaElement);
      if (sourceFolder != null && sourceFolder.getResource() != null) {
        IPath path = sourceFolder.getResource().getProjectRelativePath();
        if (path != null) {
          appendChild(marker, "sourceFolder", path.toString()); // NODE:  src/main
        }
      }
      IPackageFragment pack = JavaElementUtil.getPackageFor(javaElement);
      appendChild(marker, "package", pack.getElementName());
      IType type = JavaElementUtil.getTypeFor(javaElement, true);// NODE: UCDetectorPlugin
      appendChild(marker, "class", JavaElementUtil.getElementName(type));
      //
      Element javaTypeElement = appendChild(marker, "javaType", null);
      javaTypeElement.setAttribute("simple", JavaElementUtil.getMemberTypeStringSimple(javaElement));
      javaTypeElement.setAttribute("long", JavaElementUtil.getMemberTypeString(javaElement));
      MemberInfo memberInfo = JavaElementUtil.getMemberInfo(javaElement);
      if (memberInfo != null) {
        javaTypeElement.setAttribute("icon", memberInfo.getIcon());
      }

      if (javaElement instanceof IMethod) {
        IMethod method = (IMethod) javaElement;
        appendChild(marker, "method", JavaElementUtil.getSimpleMethodName(method)); // NODE: method
      }
      if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        appendChild(marker, "field", JavaElementUtil.getSimpleFieldName(field)); // NODE: field
      }
      if (reportParam.getAuthor() != null) {
        appendChild(marker, "author", reportParam.getAuthorTrimmed());
      }
      if (UCDetectorPlugin.isHeadlessMode() && markerCount % 50 == 0) {
        Log.info("Flush reports!");
        writeReports(false);
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678379
src/main/org/ucdetector/report/XmlReport.java 294 333
rc/main/org/ucdetector/report/XmlReport.jav 295 322
----------------------------------------
  private void appendStatistics(boolean isEndReport) {
    if (isFirstStatistic) {
      isFirstStatistic = false;
      abouts = appendChild(statistcs, "abouts", null);
      appendAbout("operatingSystem", "Operating system", UCDetectorPlugin.getAboutOS(), true, null);
      appendAbout("javaVersion", "Java", UCDetectorPlugin.getAboutJavaVersion(), true, null);
      appendAbout("eclipseVersion", "Eclipse", UCDetectorPlugin.getAboutEclipseVersion(), true, null);
      appendAbout("eclipseHome", "Eclipse home", UCDetectorPlugin.getAboutEclipseHome(), false, null);
      appendAbout("eclipseProduct", "Eclipse product", UCDetectorPlugin.getAboutEclipseProduct(), true, null);
      appendAbout("ucdetectorVersion", "UCDetector", UCDetectorPlugin.getAboutUCDVersion(), true, null);
      appendAbout("logfile", "Logfile", UCDetectorPlugin.getAboutLogfile(), false, null);
      appendAbout("workspace", "Workspace", UCDetectorPlugin.getAboutWorkspace(), false, null);
      appendAbout("mode", "Mode", Prefs.getModeName(), true, null);
      appendAbout("host", "Host", UCDetectorPlugin.getHostName(), false, null);
      appendAbout("headless", "headless", "" + UCDetectorPlugin.isHeadlessMode(), false, null);
      //
      Element searched = appendChild(statistcs, "searched", null);
      for (IJavaElement javaElement : objectsToIterate) {
        Element search = appendChild(searched, "search", JavaElementUtil.getElementName(javaElement));
        search.setAttribute("class", javaElement.getClass().getSimpleName());
      }
      Element preferencesNode = appendChild(statistcs, "preferences", null);
      Set<Entry<String, String>> preferencesSet = UCDetectorPlugin.getDeltaPreferences().entrySet();
      for (Entry<String, String> entry : preferencesSet) {
        Element preferenceNode = appendChild(preferencesNode, "preference", null);
        preferenceNode.setAttribute("key", entry.getKey());
        preferenceNode.setAttribute("value", entry.getValue());
      }
    }
    // Nodes change after each flush
    long now = System.currentTimeMillis();
    long duration = (now - startTime);
    String durationString = StopWatch.timeAsString(duration);
    nodeCreated = appendAbout("reportCreated", "Created report", UCDetectorPlugin.getNow(), true, nodeCreated);
    nodeCreatedTS = appendAbout("reportCreatedTS", "Created report", "" + now, false, nodeCreatedTS);
    nodeDuration = appendAbout("searchDuration", "Search duration", durationString, true, nodeDuration);
    nodeDurationTS = appendAbout("searchDurationTS", "Search duration", "" + duration, false, nodeDurationTS);
    nodeFinished = appendAbout("detectionFinished", "Detection Finished", "" + isEndReport, false, nodeFinished);
    nodeWarnings = appendAbout("warnings", "Warnings", String.valueOf(markerCount), true, nodeWarnings);
  }

----------------------------------------
    if (isFirstStatistic) {
      isFirstStatistic = false;
      abouts = appendChild(statistcs, "abouts", null);
      appendAbout("operatingSystem", "Operating system", UCDetectorPlugin.getAboutOS(), true, null);
      appendAbout("javaVersion", "Java", UCDetectorPlugin.getAboutJavaVersion(), true, null);
      appendAbout("eclipseVersion", "Eclipse", UCDetectorPlugin.getAboutEclipseVersion(), true, null);
      appendAbout("eclipseHome", "Eclipse home", UCDetectorPlugin.getAboutEclipseHome(), false, null);
      appendAbout("eclipseProduct", "Eclipse product", UCDetectorPlugin.getAboutEclipseProduct(), true, null);
      appendAbout("ucdetectorVersion", "UCDetector", UCDetectorPlugin.getAboutUCDVersion(), true, null);
      appendAbout("logfile", "Logfile", UCDetectorPlugin.getAboutLogfile(), false, null);
      appendAbout("workspace", "Workspace", UCDetectorPlugin.getAboutWorkspace(), false, null);
      appendAbout("mode", "Mode", Prefs.getModeName(), true, null);
      appendAbout("host", "Host", UCDetectorPlugin.getHostName(), false, null);
      appendAbout("headless", "headless", "" + UCDetectorPlugin.isHeadlessMode(), false, null);
      //
      Element searched = appendChild(statistcs, "searched", null);
      for (IJavaElement javaElement : objectsToIterate) {
        Element search = appendChild(searched, "search", JavaElementUtil.getElementName(javaElement));
        search.setAttribute("class", javaElement.getClass().getSimpleName());
      }
      Element preferencesNode = appendChild(statistcs, "preferences", null);
      Set<Entry<String, String>> preferencesSet = UCDetectorPlugin.getDeltaPreferences().entrySet();
      for (Entry<String, String> entry : preferencesSet) {
        Element preferenceNode = appendChild(preferencesNode, "preference", null);
        preferenceNode.setAttribute("key", entry.getKey());
        preferenceNode.setAttribute("value", entry.getValue());
      }
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678380
src/main/org/ucdetector/action/UCDetectorAction.java 57 77
rc/cycle/org/ucdetector/cycle/CycleCalculator.jav 147 160
----------------------------------------
    public void run() {
      String objectToShow = null;
      try {
        UCDProgressMonitor monitor = iterator.getMonitor();
        if (monitor.isFinished()) {
          // See org.eclipse.ui.views.markers.MarkerViewUtil.getViewId()
          objectToShow = IPageLayout.ID_PROBLEM_VIEW;
          UCDetectorPlugin.getActivePage().showView(IPageLayout.ID_PROBLEM_VIEW);
          return;
        }
        IJavaElement element = monitor.getActiveSearchElement();
        if (element != null) {
          objectToShow = JavaElementUtil.getElementName(element);
          IEditorPart part = JavaUI.openInEditor(element, true, false);
          JavaUI.revealInEditor(part, element);
        }
      }
      catch (Exception ex) {
        Log.error("Can't open view for object: " + objectToShow, ex);//$NON-NLS-1$
      }
    }

----------------------------------------
    for (IType reference : references) {
      if (path.size() > Prefs.getCycleDepth()) {
        continue; // stop recursion
      }
      TypeAndMatches first = path.firstElement();
      if (first.getRoot().equals(reference)) {
        // We are back to the first element. cycle found!
        LinkedList<CycleType> cycleTypeList = createCycleList(path);
        Cycle cycle = new Cycle(searchResult, cycleTypeList);
        result.add(cycle);
        continue;// stop recursion
      }
      searchCycles(reference, path, result);
    }

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
53
28678381
src/main/org/ucdetector/action/UCDetectorAction.java 59 73
rc/cycle/org/ucdetector/cycle/CycleView.jav 462 471
----------------------------------------
      try {
        UCDProgressMonitor monitor = iterator.getMonitor();
        if (monitor.isFinished()) {
          // See org.eclipse.ui.views.markers.MarkerViewUtil.getViewId()
          objectToShow = IPageLayout.ID_PROBLEM_VIEW;
          UCDetectorPlugin.getActivePage().showView(IPageLayout.ID_PROBLEM_VIEW);
          return;
        }
        IJavaElement element = monitor.getActiveSearchElement();
        if (element != null) {
          objectToShow = JavaElementUtil.getElementName(element);
          IEditorPart part = JavaUI.openInEditor(element, true, false);
          JavaUI.revealInEditor(part, element);
        }
      }

----------------------------------------
    public void run() {
      Object selected = getFirstSelectedElement();
      if (selected != null) {
        CycleBaseElement first = (CycleBaseElement) selected;
        CycleRegionIterator iterator = new CycleRegionIterator();
        CycleBaseElement nextMatch = iterator.getNext(first, next);
        TreeItem[] roots = tree.getItems();
        iterateTreeItems(roots, nextMatch);
      }
    }

----------------------------------------
